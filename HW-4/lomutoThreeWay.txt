from random import randint

def swap (a,i,j):
    (a[i], a[j]) = (a[j], a[i])

def lomutoThreeWayPartition (a):
    n = len (a)
    pivot = a[n -1]
    # print(pivot)
    i = k = -1
    j =0
    for j in range (0 ,n -1) :
        if (a [j] < pivot ):
            swap(a,i+1,j)
            if(k != i):
                swap(a,k+1,j)
            i += 1
            k += 1
        elif(a[j] == pivot):
            swap(a,k+1,j)
            k+=1
    # print("Pivot", n-1, "i+1", i+1)
    if(i != k):
        swap(a,k+1,n-1)
    elif(a[n-1]< a[0]):
        swap(a, n-1, 0)

    return (a, "Pivot x=", pivot)

def test(a):
    print("------------------------------------------------------------------------")
    print("Orig array", a, "\n")
    print("Partitioned array",lomutoThreeWayPartition(a), "\n")


# *************************** TEST CASES ***********************************************
array = [20, 12, 17, 18, 9, 5, 4, 12, 8, 12]
newarray = [1,6,3,5,4,9,5]
decending = [25,24,23,22,20,16,14,10,10,10,12,8,2,3,4,10]
anotherOne = [1,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,7,8,4,5,6,5]
bad = [20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]
doubBad = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]
fives = [1,5,5,5,5,5,5,5,5,5,5,5]
badFives = [5,5,5,5,5,5,5,5,5,1]
test(newarray)
test(array)
test(decending)
test(anotherOne)
test(bad)
test (doubBad)
test(fives)
test(badFives)

# ****************************Output*******************************************

# ----------------------------------------------------------------------
# Orig array [1, 6, 3, 5, 4, 9, 5]
#
# Partitioned array ([1, 3, 4, 5, 5, 9, 6], 'Pivot x=', 5)
#
# ------------------------------------------------------------------------
# Orig array [20, 12, 17, 18, 9, 5, 4, 12, 8, 12]
#
# Partitioned array ([9, 5, 4, 8, 12, 12, 12, 20, 17, 18], 'Pivot x=', 12)
#
# ------------------------------------------------------------------------
# Orig array [25, 24, 23, 22, 20, 16, 14, 10, 10, 10, 12, 8, 2, 3, 4, 10]
#
# Partitioned array ([8, 2, 3, 4, 10, 10, 10, 10, 24, 23, 12, 22, 20, 16, 14, 25], 'Pivot x=', 10)
#
# ------------------------------------------------------------------------
# Orig array [1, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 7, 8, 4, 5, 6, 5]
#
# Partitioned array ([1, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 7, 6, 8], 'Pivot x=', 5)
#
# ------------------------------------------------------------------------
# Orig array [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]
#
# Partitioned array ([1, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 20], 'Pivot x=', 1)
#
# ------------------------------------------------------------------------
# Orig array [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20] 
#
# Partitioned array ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], 'Pivot x=', 20)
#
# ------------------------------------------------------------------------
# Orig array [1, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]
#
# Partitioned array ([1, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], 'Pivot x=', 5)
#
# ------------------------------------------------------------------------
# Orig array [5, 5, 5, 5, 5, 5, 5, 5, 5, 1]
#
# Partitioned array ([1, 5, 5, 5, 5, 5, 5, 5, 5, 5], 'Pivot x=', 1)
#
